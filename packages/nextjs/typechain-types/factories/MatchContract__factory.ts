/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { MatchContract, MatchContractInterface } from "../MatchContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "_bank",
        type: "address",
      },
      {
        internalType: "uint88",
        name: "_minReward",
        type: "uint88",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "AddressZero",
    type: "error",
  },
  {
    inputs: [],
    name: "ETHTransferFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "NoAction",
    type: "error",
  },
  {
    inputs: [],
    name: "NoAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "NotOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "NotTheOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "OrderAIncorrectlyFulfilled",
    type: "error",
  },
  {
    inputs: [],
    name: "OrderBIncorrectlyFulfilled",
    type: "error",
  },
  {
    inputs: [],
    name: "OrderInactive",
    type: "error",
  },
  {
    inputs: [],
    name: "OverflowPrice",
    type: "error",
  },
  {
    inputs: [],
    name: "PriceTooHigh",
    type: "error",
  },
  {
    inputs: [],
    name: "RewardTooLow",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferFromFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "UnknownAction",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "tokenToSell",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "tokenToBuy",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "indexOrder",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "enum MatchLibrary.OrderStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "trader",
            type: "address",
          },
          {
            internalType: "uint88",
            name: "reward",
            type: "uint88",
          },
          {
            internalType: "uint128",
            name: "amountToSell",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToBuy",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToSellRest",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToBuyRest",
            type: "uint128",
          },
        ],
        indexed: false,
        internalType: "struct MatchLibrary.Order",
        name: "order",
        type: "tuple",
      },
    ],
    name: "AddOrder",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "tokenToSell",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "tokenToBuy",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "indexOrder",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "enum MatchLibrary.OrderStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "trader",
            type: "address",
          },
          {
            internalType: "uint88",
            name: "reward",
            type: "uint88",
          },
          {
            internalType: "uint128",
            name: "amountToSell",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToBuy",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToSellRest",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToBuyRest",
            type: "uint128",
          },
        ],
        indexed: false,
        internalType: "struct MatchLibrary.Order",
        name: "order",
        type: "tuple",
      },
    ],
    name: "Cancel",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "desiredAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "depositedAmount",
        type: "uint256",
      },
    ],
    name: "Deposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "userA",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "tokenToSell",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "tokenToBuy",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "userB",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "indexOrderA",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "indexOrderB",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "enum MatchLibrary.OrderStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "trader",
            type: "address",
          },
          {
            internalType: "uint88",
            name: "reward",
            type: "uint88",
          },
          {
            internalType: "uint128",
            name: "amountToSell",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToBuy",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToSellRest",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToBuyRest",
            type: "uint128",
          },
        ],
        indexed: false,
        internalType: "struct MatchLibrary.Order",
        name: "orderA",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "enum MatchLibrary.OrderStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "trader",
            type: "address",
          },
          {
            internalType: "uint88",
            name: "reward",
            type: "uint88",
          },
          {
            internalType: "uint128",
            name: "amountToSell",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToBuy",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToSellRest",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToBuyRest",
            type: "uint128",
          },
        ],
        indexed: false,
        internalType: "struct MatchLibrary.Order",
        name: "orderB",
        type: "tuple",
      },
    ],
    name: "Match",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdraw",
    type: "event",
  },
  {
    inputs: [],
    name: "PRICE_DECIMALS",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PRICE_PRECISION",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "bank",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newBank",
        type: "address",
      },
    ],
    name: "changeBank",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "enum MatchLibrary.ActionType",
            name: "actionType",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct MatchLibrary.Action[]",
        name: "actions",
        type: "tuple[]",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "minReward",
    outputs: [
      {
        internalType: "uint88",
        name: "",
        type: "uint88",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608034620000e157601f62001cc238819003918201601f19168301916001600160401b03831184841017620000e657808492606094604052833981010312620000e1576200004d81620000fc565b60406200005d60208401620000fc565b920151906001600160581b0382168203620000e157600080546001600160a01b0319166001600160a01b03928316179055600180547fff0000000000000000000000000000000000000000000000000000000000000016939091169290921760a09190911b600160a01b600160f81b0316179055604051611bb09081620001128239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620000e15756fe60806040526004361015610013575b600080fd5b6000803560e01c908163361d004f146100ca575080633ccfd60b146100c157806349650044146100b857806376cdb03b146100af5780638da5cb5b146100a657806395082d251461009d578063ba16d60014610094578063f1a640f81461008b5763f2fde38b1461008357600080fd5b61000e61048e565b5061000e61046a565b5061000e61043f565b5061000e610422565b5061000e6103f8565b5061000e6103ce565b5061000e6101ef565b5061000e610146565b34610132576020366003190112610132576004356100e781610135565b81546001600160a01b039190821633036101215716801561011d576bffffffffffffffffffffffff60a01b600154161760015580f35b5080fd5b6336b6b89560e01b60805260046080fd5b80fd5b6001600160a01b0381160361000e57565b503461000e576000806003193601126101325780546001600160a01b0390811633036101dd57806101cd9160015416908184526002602052610195604085206001600052602052604060002090565b5491845260026020526101b5604085206001600052602052604060002090565b8054908382039182116101d0575b5560015416611b69565b80f35b6101d86104e0565b6101c3565b6040516336b6b89560e01b8152600490fd5b50602036600319011261000e57600480359067ffffffffffffffff80831161000e573660238401121561000e578282013590811161000e5760248301916005936024369184871b01011161000e5781156103bf57828491349260009460019384805b610271575b50505050505080915061026557005b61026f9033611b69565b005b156103b2575b600061028c610287898585610525565b6105d7565b86815161029881610688565b6102a181610688565b036102ca576102bd87986102b76102c3936106fe565b906104f7565b9861069a565b9796610251565b600281516102d781610688565b6102e081610688565b036102f6576102bd87986102b76102c393610c00565b6003815161030381610688565b61030c81610688565b03610325578697986103206102c392610f97565b61069a565b85815161033181610688565b61033a81610688565b0361034e578697986103206102c39261178a565b84815161035a81610688565b61036381610688565b03610377578697986103206102c39261187d565b6006815161038481610688565b61038d81610688565b036103a1578697986103206102c392611953565b60405163211bf9ef60e21b81528690fd5b8187106102775780610256565b6040516397587a3360e01b8152fd5b503461000e57600036600319011261000e576001546040516001600160a01b039091168152602090f35b503461000e57600036600319011261000e576000546040516001600160a01b039091168152602090f35b503461000e57600036600319011261000e57602060405160648152f35b503461000e57600036600319011261000e5760206001600160581b0360015460a01c16604051908152f35b503461000e57600036600319011261000e576020604051670de0b6b3a76400008152f35b503461000e57602036600319011261000e576004356104ac81610135565b6000805490916001600160a01b039081831633036101dd57169081156104dc576001600160a01b03191617815580f35b8280fd5b50634e487b7160e01b600052601160045260246000fd5b9190820391821161050457565b61050c6104e0565b565b50634e487b7160e01b600052603260045260246000fd5b9190811015610548575b60051b81013590603e198136030182121561000e570190565b61055061050e565b61052f565b50634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761058857604052565b610590610555565b604052565b90601f8019910116810190811067ffffffffffffffff82111761058857604052565b6040519060e0820182811067ffffffffffffffff82111761058857604052565b60408136031261000e57604051906105ee8261056c565b8035600781101561000e57825260208082013567ffffffffffffffff9283821161000e57019136601f8401121561000e578235908111610664575b60405192610640601f8301601f1916840185610595565b8184523683838301011161000e578160009284809301838701378401015282015290565b61066c610555565b610629565b50634e487b7160e01b600052602160045260246000fd5b6007111561069257565b61050c610671565b60019060001981146106aa570190565b6106b26104e0565b0190565b919082604091031261000e57602082516106cf81610135565b92015190565b9081602091031261000e575190565b506040513d6000823e3d90fd5b9190820180921161050457565b906000916107196020809201518280825183010191016106b6565b936001600160a01b0390911691600090600184036107b45750503360009081526002602052604090208491506107639083905b9060018060a01b0316600052602052604060002090565b61076e8282546106f1565b90557fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d76107af825b6040805194855260208501919091523393918291820190565b0390a3565b6040516370a0823160e01b80825230600483015293969361081e929081836024818a5afa928315610901575b85936108e2575b506107f48630338a611ad8565b60405190815230600482015281816024818a5afa9182156108d5575b85926108a8575b50506104f7565b90508181111561087e57507fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d76107af825b33600090815260026020526040902081906108779061086f90889061074c565b9182546106f1565b9055610796565b6107af7fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d79161084f565b6108c79250803d106108ce575b6108bf8183610595565b8101906106d5565b3880610817565b503d6108b5565b6108dd6106e4565b610810565b6108fa919350823d84116108ce576108bf8183610595565b91386107e7565b6109096106e4565b6107e0565b51906001600160801b038216820361000e57565b908160a091031261000e57805161093881610135565b91602082015161094781610135565b9160408101516001600160581b038116810361000e5791610976608061096f6060850161090e565b930161090e565b90565b90600a6001600160581b038093160291821691820361050457565b50634e487b7160e01b600052601260045260246000fd5b6001600160581b03918216908216039190821161050457565b6004111561069257565b80548210156109eb575b6000526003602060002091020190600090565b6109f361050e565b6109d8565b906004811015610a11575b60ff80198354169116179055565b610a19610671565b610a03565b906001600160801b03166001600160801b0319825416179055565b8054610a5c9168010000000000000000821015610b64575b6001820181556109ce565b919091610b4e57610aeb60c0600261050c94610a8385516004811015610b41575b826109f8565b60208501518154604087015160089290921b610100600160a81b031660ff9091161760a89190911b6001600160a81b031916178155610b1460018201610adc610ad660608901516001600160801b031690565b82610a1e565b60808701516001600160801b03165b81546001600160801b031660809190911b6fffffffffffffffffffffffffffffffff1916179055565b0192610b33610b2d60a08301516001600160801b031690565b85610a1e565b01516001600160801b031690565b610b49610671565b610a7d565b634e487b7160e01b600052600060045260246000fd5b610b6c610555565b610a51565b906004821015610b7e5752565b610b86610671565b52565b90929160e0906101008301948352610ba5602084018251610b71565b60018060a01b0360208201511660408401526001600160581b03604082015116606084015260c06001600160801b03918260608201511660808601528260808201511660a08601528260a08201511682860152015116910152565b6020610c1791015160208082518301019101610922565b6001600160a01b039594938616938616929083158015610dff575b610ded576001600160801b0380821615908115610de2575b50610dd0576001546001600160581b0380841692818360a01c168410610dbe577fff3bc2a56b72ea77cd35a9f8742e4233570604968fd25198111418b594f6a57a94610cf7610d8293610cee610cde610db9989e610cc4610cbd610cad88610979565b6001600160581b03606491160490565b80976109ab565b981660018060a01b03166000526002602052604060002090565b6001600052602052604060002090565b921682546106f1565b9055610d72610d1c8961074c8a60018060a01b03166000526003602052604060002090565b5496610d44610d296105b7565b60018152953360208801526001600160581b03166040870152565b6001600160801b03811660608601526001600160801b03831660808601526001600160801b031660a0850152565b6001600160801b031660c0830152565b610dab81610da68861074c8960018060a01b03166000526003602052604060002090565b610a39565b604051918291339583610b89565b0390a4565b60405163256eeaad60e01b8152600490fd5b604051637bc90c0560e11b8152600490fd5b905083161538610c4a565b604051639fabe1c160e01b8152600490fd5b508415610c32565b919082608091031261000e578151610e1e81610135565b916020810151610e2d81610135565b916060604083015192015190565b90670de0b6b3a76400009182810292818404149015171561050457565b8115610e62570490565b610e6a610994565b0490565b60011b907001fffffffffffffffffffffffffffffffe6ffffffffffffffffffffffffffffffffe83169216820361050457565b9190916001600160801b038080941691160291821691820361050457565b906001600160801b03809116918215610ed757160490565b610edf610994565b160490565b6001600160801b03918216908216039190821161050457565b60c0908054610f0f8460ff8316610b71565b6001600160a01b03600882901c16602085015260a81c604084015260018101546001600160801b038082166060860152608091821c8286015260029092015491821660a08501521c910152565b9095949261050c94610f90916101409461022085019960018060a01b03168552602085015260408401526060830190610efd565b0190610efd565b6020610fae91015160208082518301019101610e07565b6001600160a01b038416158015611779575b610ded576001600160a01b038481166000908152600360205260409020610ff4918491610fef9187169061074c565b6109ce565b506001600160a01b038481166000908152600360205260409020919391611023918491610fef9189169061074c565b5093835494600160ff8716611037816109c4565b1480159061175b575b6117495761106860018601546001600160801b036110608260801c610e3b565b911690610e58565b946001820154956001600160801b0387169061109161108683610e3b565b9860801c8099610e58565b1061173757600282015460801c966110b360028501546001600160801b031690565b6001600160801b0381166001600160801b038a161161172d575b506110f0916110df6110e4928a610ea1565b610ebf565b6001600160801b031690565b956001600160801b03871161171b57825460081c6001600160a01b03908116600081815260026020526040902090986112a89261128a926111339189169061074c565b6111476001600160801b03861682546104f7565b90556001600160a01b0360088c901c811660009081526002602052604090206111729189169061074c565b6111866001600160801b03861682546106f1565b90556001600160a01b038a811660009081526002602052604090206001600160801b03916111b791908f169061074c565b9116906111c58282546106f1565b90556001600160a01b0360088c901c811660009081526002602052604090206111f0918e169061074c565b6111fb8282546104f7565b905561123561121785611212600289015460801c90565b610ee4565b60028701906001600160801b0382549181199060801b169116179055565b6112596112508561121260028a01546001600160801b031690565b60028801610a1e565b61127d6112748261121260028901546001600160801b031690565b60028701610a1e565b600286015460801c610ee4565b60028501906001600160801b0382549181199060801b169116179055565b60028201548060801c156000146116925750815460ff191660031782556112df6112d3835460a81c90565b6001600160581b031690565b3360009081526002602052604090206112fb9061086f90610cde565b905581546001600160a81b03168255886001600160801b0361132760028501546001600160801b031690565b1689600282116115c3575b5050505b60028301548060801c156000146114e0575050815460ff191660031782557f0b809fbc45b0453186de2abbb9d10aa657cf8a3640bed98891aa75ca431f9eff94610db992919061138a6112d3845460a81c90565b3360009081526002602052604090206113a69061086f90610cde565b905582546001600160a81b031683556001600160801b036113d160028501546001600160801b031690565b1660028111611400575b505b6040516001600160a01b039586169a86169960081c909516979495869586610f5c565b6114d160036114da92046001600160801b0361141b82610e6e565b6001600160a01b03808e166000908152600260205260409020919391611443918c169061074c565b61145083851682546104f7565b9055336000908152600260205260409020911690611478906001600160a01b038b169061074c565b6114838282546106f1565b90556001546114bc9061086f906001600160a01b038c81169161074c91165b6001600160a01b0316600090815260026020526040902090565b905560028601546001600160801b0316610ee4565b60028501610a1e565b386113db565b909291906001600160801b031615806115bb575b1561150b57604051632f586c8160e21b8152600490fd5b7f0b809fbc45b0453186de2abbb9d10aa657cf8a3640bed98891aa75ca431f9eff95610db9936115b461153f855460a81c90565b9161159c61157c6115756112d36115606001600160581b0395868916610ea1565b60018b01546001600160801b03165b90610ebf565b80956109ab565b87546001600160a81b031660a89190911b6001600160a81b031916178755565b336000908152600260205260409020610cee90610cde565b90556113dd565b5060016114f4565b61168a9261166c61086f6001600160801b03600361168196046116106115e882610e6e565b60089790971c6001600160a01b0390811660009081526002602052604090209087169061074c565b61161d83881682546104f7565b905533600090815260026020526040902091169390611646906001600160a01b0383169061074c565b6116518582546106f1565b90556001546001600160a01b039182169161074c91166114a2565b905560028501546001600160801b0316610ee4565b60028401610a1e565b883889611332565b6001600160801b03161580611713575b156116b9576040516335e0932160e01b8152600490fd5b815460a81c61170c6001600160581b0361159c6116ec6115756112d36116df8888610ea1565b60018a015460801c61156f565b86546001600160a81b031660a89190911b6001600160a81b031916178655565b9055611336565b5060016116a2565b6040516374dea6bf60e01b8152600490fd5b97506110f06110cd565b60405163127f08c960e11b8152600490fd5b60405163f08c50a160e01b8152600490fd5b506001611769825460ff1690565b611772816109c4565b1415611040565b506001600160a01b03831615610fc0565b60206117a1910151602080825183010191016106b6565b3360009081526002602090815260408083206001600160a01b03909516808452949091529020909190548211611844573360009081526002602052604090206118079183916117f190829061074c565b805490838203918211611837575b553390611a48565b60405190815233907f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb60203392a3565b61183f6104e0565b6117ff565b604051632ca2f52b60e11b8152600490fd5b9081606091031261000e57805161186c81610135565b91604060208301516106cf81610135565b602061189491015160208082518301019101611856565b3360009081526002602090815260408083206001600160a01b03968716808552925290912092909316929091548211611844578183826118ed6119019461074c3360018060a01b03166000526002602052604060002090565b80549084820391821161192f575b55611a48565b6040519081527f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb60203392a3565b6119376104e0565b6118fb565b9081526101008101929161050c9160200190610efd565b602061196a91015160208082518301019101611856565b6001600160a01b03928316600081815260036020526040902092841693909261199a908390610fef90879061074c565b5090815490600160ff83166119ae816109c4565b0361174957339160081c1603611a3657805460ff191660021781557f551feef45b0aa18fb81a515089af9d12b5bfed77ab19089554d57038ee21eb0590610db9906119fd6112d3825460a81c90565b336000908152600260205260409020611a199061086f90610cde565b905580546001600160a81b0316815560405191829133958361193c565b6040516330cd747160e01b8152600490fd5b6001600160a01b038116600103611a6457509061050c91611b69565b6044926040519263a9059cbb60e01b84526004840152602483015260009283928380935af115611ad0573d611a97575b50565b60208160803e60016080510315611a9457807f90b8ec1877afffd816d05d9b13947f3ff18ec5851c38bad15ec2b710f92391b160209252fd5b3d81803e3d90fd5b9192916001600160a01b038116600103611af757505061050c91611b69565b9091606493604051936323b872dd60e01b855260048501526024840152604483015260009283928380935af115611ad0573d611b305750565b60208160803e60016080510315611a9457807f7939f424dcbfa2fa1d156b76cc697c9670f0bbaf8cf205037134e844b4916e7460209252fd5b60008080809481945af115611b7b5750565b807fb12d13ebe76e15b5fdb7bf52f0daba617b83ebcc560b0666c44fcdcd71f4362b60209252fdfea164736f6c6343000811000a";

type MatchContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MatchContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MatchContract__factory extends ContractFactory {
  constructor(...args: MatchContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _owner: PromiseOrValue<string>,
    _bank: PromiseOrValue<string>,
    _minReward: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MatchContract> {
    return super.deploy(
      _owner,
      _bank,
      _minReward,
      overrides || {}
    ) as Promise<MatchContract>;
  }
  override getDeployTransaction(
    _owner: PromiseOrValue<string>,
    _bank: PromiseOrValue<string>,
    _minReward: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _owner,
      _bank,
      _minReward,
      overrides || {}
    );
  }
  override attach(address: string): MatchContract {
    return super.attach(address) as MatchContract;
  }
  override connect(signer: Signer): MatchContract__factory {
    return super.connect(signer) as MatchContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MatchContractInterface {
    return new utils.Interface(_abi) as MatchContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MatchContract {
    return new Contract(address, _abi, signerOrProvider) as MatchContract;
  }
}
