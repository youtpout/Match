/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Match, MatchInterface } from "../../contracts/Match";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "_bank",
        type: "address",
      },
      {
        internalType: "uint88",
        name: "_minReward",
        type: "uint88",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "AddressZero",
    type: "error",
  },
  {
    inputs: [],
    name: "ETHTransferFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "Locked",
    type: "error",
  },
  {
    inputs: [],
    name: "NoAction",
    type: "error",
  },
  {
    inputs: [],
    name: "NoAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "NotOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "NotTheOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "OrderAIncorrectlyFulfilled",
    type: "error",
  },
  {
    inputs: [],
    name: "OrderBIncorrectlyFulfilled",
    type: "error",
  },
  {
    inputs: [],
    name: "OrderInactive",
    type: "error",
  },
  {
    inputs: [],
    name: "OverflowPrice",
    type: "error",
  },
  {
    inputs: [],
    name: "PriceTooHigh",
    type: "error",
  },
  {
    inputs: [],
    name: "RewardTooLow",
    type: "error",
  },
  {
    inputs: [],
    name: "SameToken",
    type: "error",
  },
  {
    inputs: [],
    name: "SameUser",
    type: "error",
  },
  {
    inputs: [],
    name: "TraderANotEnoughToken",
    type: "error",
  },
  {
    inputs: [],
    name: "TraderBNotEnoughToken",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferFromFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "UnknownAction",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "tokenToSell",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "tokenToBuy",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "indexOrder",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "enum MatchLibrary.OrderStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "trader",
            type: "address",
          },
          {
            internalType: "uint88",
            name: "reward",
            type: "uint88",
          },
          {
            internalType: "uint128",
            name: "amountToSell",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToBuy",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToSellRest",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToBuyRest",
            type: "uint128",
          },
        ],
        indexed: false,
        internalType: "struct MatchLibrary.Order",
        name: "order",
        type: "tuple",
      },
    ],
    name: "AddOrder",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "tokenToSell",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "tokenToBuy",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "indexOrder",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "enum MatchLibrary.OrderStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "trader",
            type: "address",
          },
          {
            internalType: "uint88",
            name: "reward",
            type: "uint88",
          },
          {
            internalType: "uint128",
            name: "amountToSell",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToBuy",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToSellRest",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToBuyRest",
            type: "uint128",
          },
        ],
        indexed: false,
        internalType: "struct MatchLibrary.Order",
        name: "order",
        type: "tuple",
      },
    ],
    name: "CancelOrder",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "desiredAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "depositedAmount",
        type: "uint256",
      },
    ],
    name: "Deposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "userA",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "tokenToSell",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "tokenToBuy",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "userB",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "indexOrderA",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "indexOrderB",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "enum MatchLibrary.OrderStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "trader",
            type: "address",
          },
          {
            internalType: "uint88",
            name: "reward",
            type: "uint88",
          },
          {
            internalType: "uint128",
            name: "amountToSell",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToBuy",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToSellRest",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToBuyRest",
            type: "uint128",
          },
        ],
        indexed: false,
        internalType: "struct MatchLibrary.Order",
        name: "orderA",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "enum MatchLibrary.OrderStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "trader",
            type: "address",
          },
          {
            internalType: "uint88",
            name: "reward",
            type: "uint88",
          },
          {
            internalType: "uint128",
            name: "amountToSell",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToBuy",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToSellRest",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToBuyRest",
            type: "uint128",
          },
        ],
        indexed: false,
        internalType: "struct MatchLibrary.Order",
        name: "orderB",
        type: "tuple",
      },
    ],
    name: "MatchOrder",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdraw",
    type: "event",
  },
  {
    inputs: [],
    name: "PRICE_DECIMALS",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "bank",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newBank",
        type: "address",
      },
    ],
    name: "changeBank",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenToSell",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenToBuy",
        type: "address",
      },
    ],
    name: "countOrders",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "enum MatchLibrary.ActionType",
            name: "actionType",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct MatchLibrary.Action[]",
        name: "actions",
        type: "tuple[]",
      },
    ],
    name: "execute",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reward",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenToSell",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenToBuy",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "cursor",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "howMany",
        type: "uint256",
      },
    ],
    name: "fetchPageOrders",
    outputs: [
      {
        components: [
          {
            internalType: "enum MatchLibrary.OrderStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "trader",
            type: "address",
          },
          {
            internalType: "uint88",
            name: "reward",
            type: "uint88",
          },
          {
            internalType: "uint128",
            name: "amountToSell",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToBuy",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToSellRest",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToBuyRest",
            type: "uint128",
          },
        ],
        internalType: "struct MatchLibrary.Order[]",
        name: "values",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "newCursor",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenToSell",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenToBuy",
        type: "address",
      },
      {
        internalType: "uint88",
        name: "reward",
        type: "uint88",
      },
      {
        internalType: "uint128",
        name: "amountToSell",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "amountToBuy",
        type: "uint128",
      },
    ],
    name: "getActionAddOrder",
    outputs: [
      {
        components: [
          {
            internalType: "enum MatchLibrary.ActionType",
            name: "actionType",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct MatchLibrary.Action",
        name: "action",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenToSell",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenToBuy",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "indexOrder",
        type: "uint256",
      },
    ],
    name: "getActionCancel",
    outputs: [
      {
        components: [
          {
            internalType: "enum MatchLibrary.ActionType",
            name: "actionType",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct MatchLibrary.Action",
        name: "action",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "getActionDeposit",
    outputs: [
      {
        components: [
          {
            internalType: "enum MatchLibrary.ActionType",
            name: "actionType",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct MatchLibrary.Action",
        name: "action",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenToSell",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenToBuy",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "indexOrderA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "indexOrderB",
        type: "uint256",
      },
    ],
    name: "getActionMatch",
    outputs: [
      {
        components: [
          {
            internalType: "enum MatchLibrary.ActionType",
            name: "actionType",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct MatchLibrary.Action",
        name: "action",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "getActionWithdraw",
    outputs: [
      {
        components: [
          {
            internalType: "enum MatchLibrary.ActionType",
            name: "actionType",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct MatchLibrary.Action",
        name: "action",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "getActionWithdrawTo",
    outputs: [
      {
        components: [
          {
            internalType: "enum MatchLibrary.ActionType",
            name: "actionType",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct MatchLibrary.Action",
        name: "action",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenToSell",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenToBuy",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getOrder",
    outputs: [
      {
        components: [
          {
            internalType: "enum MatchLibrary.OrderStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "trader",
            type: "address",
          },
          {
            internalType: "uint88",
            name: "reward",
            type: "uint88",
          },
          {
            internalType: "uint128",
            name: "amountToSell",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToBuy",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToSellRest",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToBuyRest",
            type: "uint128",
          },
        ],
        internalType: "struct MatchLibrary.Order",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "minReward",
    outputs: [
      {
        internalType: "uint88",
        name: "",
        type: "uint88",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "orders",
    outputs: [
      {
        internalType: "enum MatchLibrary.OrderStatus",
        name: "status",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "trader",
        type: "address",
      },
      {
        internalType: "uint88",
        name: "reward",
        type: "uint88",
      },
      {
        internalType: "uint128",
        name: "amountToSell",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "amountToBuy",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "amountToSellRest",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "amountToBuyRest",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "usersBalances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608034620000ed57601f620025ff38819003918201601f19168301916001600160401b03831184841017620000f257808492606094604052833981010312620000ed576200004d8162000108565b9060406200005e6020830162000108565b9101516001600160581b0381168103620000ed5760008054600180547fff00000000000000000000000000000000000000000000000000000000000000166001600160a01b039586161760a09490941b600160a01b600160f81b0316939093179092556001600160a81b03199091169290911691909117600160a01b1790556040516124e190816200011e8239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620000ed5756fe60806040526004361015610013575b600080fd5b60003560e01c8063361d004f1461018f5780633ccfd60b1461018657806346e40e091461017d578063496500441461017457806354b9a5861461016b5780635a6e1dca146101625780635d6e163f146101595780636673c2f11461015057806376cdb03b146101475780638da5cb5b1461013e578063acb41c2214610135578063ba16d6001461012c578063c05e93b314610123578063cefd071b1461011a578063d4d925f314610111578063dd02df1614610108578063e055561e146100ff578063f1a640f8146100f65763f2fde38b146100ee57600080fd5b61000e610e2b565b5061000e610e07565b5061000e610d03565b5061000e610c1b565b5061000e610b45565b5061000e610b08565b5061000e610ac2565b5061000e610a6f565b5061000e610a04565b5061000e61094f565b5061000e610925565b5061000e61085b565b5061000e6107c7565b5061000e610752565b5061000e6106cd565b5061000e61046b565b5061000e6103db565b5061000e610249565b5061000e6101a9565b6001600160a01b0381160361000e57565b503461000e57602036600319011261000e576004356101c781610198565b6000546001600160a01b03919082811633036102375760a01c60ff1615610225576000805460ff60a01b1916905516801561000e57600180546001600160a01b0319169190911790556000805460ff60a01b1916600160a01b179055005b6040516303cb96db60e21b8152600490fd5b6040516336b6b89560e01b8152600490fd5b503461000e5760008060031936011261030c5780546001600160a01b039081811633036102375760a01c60ff1615610225576000805460ff60a01b191690556102e99080600154169081845260026020526102b1604085206001600052602052604060002090565b5491845260026020526102d1604085206001600052602052604060002090565b8054908382039182116102ff575b556001541661249a565b6000805460ff60a01b1916600160a01b17905580f35b610307610ea9565b6102df565b80fd5b608090600319011261000e5760043561032781610198565b9060243561033481610198565b906044359060643590565b50634e487b7160e01b600052602160045260246000fd5b6007111561036057565b61036861033f565b565b91909160208093818352805160078110156103ce575b82840152015160408083015280519081606084015260005b8281106103ba57505060809293506000838284010152601f8019910116010190565b818101860151848201608001528501610398565b6103d661033f565b610380565b503461000e5761045a6103ed3661030f565b91926103f76111df565b506040519360018060a01b038092166020860152166040840152606083015260808201526080815260a081019080821067ffffffffffffffff83111761045e575b8160405261044582610f1c565b6003825260c08101526040519182918261036a565b0390f35b610466610f05565b610438565b50602036600319011261000e576004803567ffffffffffffffff9182821161000e573660238301121561000e578181013592831161000e57602482016005926024369186861b01011161000e57600060ff815460a01c16156106bc576000805460ff60a01b191690558093819580156106ab57919392600192908584805b61053b575b50505050505050506105008134610ec0565b8061052b575b506000805460ff60a01b1916600160a01b179055604080519182526020820192909252f35b610535903361249a565b38610506565b979596971561069d575b809561055a6105558a8686610ed5565b610fac565b86815161056681610356565b61056f81610356565b036105b3576105919161058461058a92611234565b90611046565b985b611053565b953489116105a257859796976104e9565b604051632ca2f52b60e11b81528890fd5b600281516105c081610356565b6105c981610356565b036105de576105919161058461058a92611665565b6003819b929a9b516105ef81610356565b6105f881610356565b03610613576105919161058461060d926119e2565b99611053565b88819b929b5161062281610356565b61062b81610356565b0361063d579061058c610591926120bb565b85815161064981610356565b61065281610356565b03610664579061058c610591926121ae565b6006815161067181610356565b61067a81610356565b0361068c579061058c61059192612284565b60405163211bf9ef60e21b81528990fd5b8288106105455785976104ee565b6040516397587a3360e01b81528590fd5b6040516303cb96db60e21b81528390fd5b503461000e57604036600319011261000e5761045a6107226107306004356106f481610198565b6106fc6111df565b50604080516001600160a01b039092166020830152602435908201529182906060820190565b03601f198101835282610f7d565b6040519061073d82610f1c565b6001825260208201526040519182918261036a565b503461000e57604036600319011261000e5761045a6107226107796004356106f481610198565b6040519061078682610f1c565b6004825260208201526040519182918261036a565b606090600319011261000e576004356107b381610198565b906024356107c081610198565b9060443590565b503461000e5761045a6107226108176107df3661079b565b6107ea9491946111df565b506040519485936020850160409194939294606082019560018060a01b0380921683521660208201520152565b6040519061082482610f1c565b6005825260208201526040519182918261036a565b6001600160581b0381160361000e57565b6001600160801b0381160361000e57565b503461000e5760a036600319011261000e5761045a60043561087c81610198565b6024359061088982610198565b6044359061089682610839565b6001600160581b03606435926108ab8461084a565b608435926108b88461084a565b6108c06111df565b506040519560018060a01b0380921660208801521660408601521660608401526001600160801b0380921660808401521660a082015260a0815261090381610f61565b6040519061091082610f1c565b6002825260208201526040519182918261036a565b503461000e57600036600319011261000e576001546040516001600160a01b039091168152602090f35b503461000e57600036600319011261000e576000546040516001600160a01b039091168152602090f35b6004111561036057565b9060048210156109905752565b61099861033f565b52565b60c0906109a9838251610983565b60018060a01b0360208201511660208401526001600160581b036040820151166040840152816001600160801b03918260608201511660608601528260808201511660808601528260a08201511660a0860152015116910152565b503461000e5760e0610a60610a5a610a55610a1e3661079b565b9291610a28611096565b5060018060a01b0316600052600360205260406000209060018060a01b0316600052602052604060002090565b610b96565b50611140565b610a6d604051809261099b565bf35b503461000e57600036600319011261000e5760206001600160581b0360015460a01c16604051908152f35b604090600319011261000e57600435610ab281610198565b90602435610abf81610198565b90565b503461000e576020610aff610ad636610a9a565b6001600160a01b0391821660009081526003855260408082209290931681526020919091522090565b54604051908152f35b503461000e576020610aff610b1c36610a9a565b6001600160a01b0391821660009081526002855260408082209290931681526020919091522090565b503461000e5761045a610722610b5d6107df3661079b565b60405190610b6a82610f1c565b6006825260208201526040519182918261036a565b50634e487b7160e01b600052603260045260246000fd5b8054821015610bb3575b6000526003602060002091020190600090565b610bbb610b7f565b610ba0565b95909796926001600160581b039060c0969593610be18960e081019c610983565b6001600160a01b031660208901521660408701526001600160801b039182166060870152928116608086015291821660a085015216910152565b503461000e57610c5e610c2d3661079b565b91929060018060a01b03809416600052600360205260406000209060018060a01b0316600052602052604060002090565b90815481101561000e57610c7191610b96565b509061045a82549160026001850154940154906040519485946001600160801b0392838560801c9516938360801c93169160ff8160a81c928260081c16911688610bc0565b92919060408401604085528151809152606085019060208093019060005b84828210610ce55750505050930152565b60e085610cf8869760019596975161099b565b019401929101610cd4565b503461000e57610d123661030f565b6001600160a01b038085166000908152600360209081526040808320938716835292905220929390928390548381039182918211610dfa575b11610df2575b50610d5b836110ce565b9360005b848110610d815785610d718686611046565b9061045a60405192839283610cb6565b610ded90610dd2610a5a610dc285610dab8860018060a01b03166000526003602052604060002090565b9060018060a01b0316600052602052604060002090565b610dcc8489611046565b90610b96565b610ddc828961111e565b52610de7818861111e565b50611053565b610d5f565b925038610d51565b610e02610ea9565b610d4b565b503461000e57600036600319011261000e576020604051670de0b6b3a76400008152f35b503461000e57602036600319011261000e57600435610e4981610198565b6000805490916001600160a01b039182811633036102375760a01c60ff1615610225576000805460ff60a01b19169055168015610ea55781546001600160a01b0319161781556000805460ff60a01b1916600160a01b17905580f35b5080fd5b50634e487b7160e01b600052601160045260246000fd5b91908203918211610ecd57565b610368610ea9565b9190811015610ef8575b60051b81013590603e198136030182121561000e570190565b610f00610b7f565b610edf565b50634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff821117610f3857604052565b610f40610f05565b604052565b60e0810190811067ffffffffffffffff821117610f3857604052565b60c0810190811067ffffffffffffffff821117610f3857604052565b90601f8019910116810190811067ffffffffffffffff821117610f3857604052565b6040519061036882610f45565b60408136031261000e5760405190610fc382610f1c565b8035600781101561000e57825260208082013567ffffffffffffffff9283821161000e57019136601f8401121561000e578235908111611039575b60405192611015601f8301601f1916840185610f7d565b8184523683838301011161000e578160009284809301838701378401015282015290565b611041610f05565b610ffe565b91908201809211610ecd57565b6001906000198114611063570190565b61106b610ea9565b0190565b60209067ffffffffffffffff8111611089575b60051b0190565b611091610f05565b611082565b604051906110a382610f45565b8160c06000918281528260208201528260408201528260608201528260808201528260a08201520152565b906110d88261106f565b6110e56040519182610f7d565b82815280926110f6601f199161106f565b019060005b82811061110757505050565b602090611112611096565b828285010152016110fb565b6020918151811015611133575b60051b010190565b61113b610b7f565b61112b565b9061036860405161115081610f45565b60c08194611186815460ff811660048110156111d2575b8552600881901c6001600160a01b0316602086015260a81c6040850152565b60018101546001600160801b038082166060860152916111ca91600291906111b390608090811c90880152565b015491821660a08501906001600160801b03169052565b60801c910152565b6111da61033f565b611167565b604051906111ec82610f1c565b6060602083600081520152565b919082604091031261000e576020825161121281610198565b92015190565b9081602091031261000e575190565b506040513d6000823e3d90fd5b9060009161124f6020809201518280825183010191016111f9565b936001600160a01b0390911691600090600184036112d7575050336000908152600260205260409020849150611286908390610dab565b611291828254611046565b90557fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d76112d2825b6040805194855260208501919091523393918291820190565b0390a3565b6040516370a0823160e01b808252306004830152939693611341929081836024818a5afa928315611424575b8593611405575b506113178630338a612409565b60405190815230600482015281816024818a5afa9182156113f8575b85926113cb575b5050610ec0565b9050818111156113a157507fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d76112d2825b336000908152600260205260409020819061139a90611392908890610dab565b918254611046565b90556112b9565b6112d27fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d791611372565b6113ea9250803d106113f1575b6113e28183610f7d565b810190611218565b388061133a565b503d6113d8565b611400611227565b611333565b61141d919350823d84116113f1576113e28183610f7d565b913861130a565b61142c611227565b611303565b908160a091031261000e57805161144781610198565b91602082015161145681610198565b91604081015161146581610839565b91608060608301516114768161084a565b920151610abf8161084a565b90600a6001600160581b0380931602918216918203610ecd57565b50634e487b7160e01b600052601260045260246000fd5b6001600160581b039182169082160391908211610ecd57565b9060048110156114e6575b60ff80198354169116179055565b6114ee61033f565b6114d8565b80546115169168010000000000000000821015611641575b600182018155610b96565b91909161162b576115bb60c060026103689461153d8551600481101561161e575b826114cd565b60208501518154604087015160089290921b610100600160a81b031660ff9091161760a89190911b6001600160a81b0319161781556115db600182016115ac61159060608901516001600160801b031690565b82546001600160801b0319166001600160801b03909116178255565b60808701516001600160801b03165b81546001600160801b031660809190911b6001600160801b031916179055565b01926116106115f460a08301516001600160801b031690565b85546001600160801b0319166001600160801b03909116178555565b01516001600160801b031690565b61162661033f565b611537565b634e487b7160e01b600052600060045260246000fd5b611649610f05565b61150b565b90815261010081019291610368916020019061099b565b602061167c91015160208082518301019101611431565b6001600160a01b03959493861693861692908315801561187d575b61186b57848414611859576001600160801b038082161590811561184e575b5061183c576001546001600160581b0380841692818360a01c16841061182a577fff3bc2a56b72ea77cd35a9f8742e4233570604968fd25198111418b594f6a57a946117636117ee9361175a61174a611825989e61173061172961171988611482565b6001600160581b03606491160490565b80976114b4565b981660018060a01b03166000526002602052604060002090565b6001600052602052604060002090565b92168254611046565b90556117de61178889610dab8a60018060a01b03166000526003602052604060002090565b54966117b0611795610f9f565b60018152953360208801526001600160581b03166040870152565b6001600160801b03811660608601526001600160801b03831660808601526001600160801b031660a0850152565b6001600160801b031660c0830152565b6118178161181288610dab8960018060a01b03166000526003602052604060002090565b6114f3565b60405191829133958361164e565b0390a4565b60405163256eeaad60e01b8152600490fd5b604051637bc90c0560e11b8152600490fd5b9050831615386116b6565b60405163100dac0560e11b8152600490fd5b604051639fabe1c160e01b8152600490fd5b508415611697565b919082608091031261000e57815161189c81610198565b9160208101516118ab81610198565b916060604083015192015190565b90670de0b6b3a764000091828102928184041490151715610ecd57565b81156118e0570490565b6118e861149d565b0490565b9190916001600160801b0380809416911602918216918203610ecd57565b906001600160801b0380911691821561192257160490565b61192a61149d565b160490565b6001600160801b039182169082160391908211610ecd57565b60c090805461195a8460ff8316610983565b6001600160a01b03600882901c16602085015260a81c604084015260018101546001600160801b038082166060860152608091821c8286015260029092015491821660a08501521c910152565b90959492610368946119db916101409461022085019960018060a01b03168552602085015260408401526060830190611948565b0190611948565b906119fc6020600093015160208082518301019101611885565b909490916001600160a01b03908482161580156120b1575b61186b57611a4087610a55848416610dab868a1660018060a01b03166000526003602052604060002090565b50611a6985610a55858916610dab87871660018060a01b03166000526003602052604060002090565b5090805495600160ff8816611a7d81610979565b14801590612093575b61208157825460081c6001600160a01b031695858716868960081c161461206f57611acb60018401546001600160801b03611ac38260801c6118b9565b9116906118d6565b906001850154916001600160801b03831690611af4611ae9836118b9565b9460801c80956118d6565b1061205d57600285015460801c92611b1660028801546001600160801b031690565b6001600160801b0381166001600160801b03861611612053575b50611b5391611b42611b4792866118ec565b61190a565b6001600160801b031690565b6001600160801b038111612041576001600160a01b0389166000908152600260205260409020611b8690888a1690610dab565b546001600160801b0384161161202f576001600160a01b0360088b901c89161660009081526002602052604090206001600160801b03821690611bcc908a8e1690610dab565b541061201d57611d6a6001600160801b03611d8892611c9e8d8f8d8f610dab928f83928d611c4f8b61175a8786611c1e82611c719916610dab8960018060a01b03166000526002602052604060002090565b611c2b8588168254610ec0565b905516610dab898d60081c1660018060a01b03166000526002602052604060002090565b90556001600160a01b0316600090815260026020526040902082841690610dab565b611c7e8989168254611046565b9055169260081c1660018060a01b03166000526002602052604060002090565b611cab8383168254610ec0565b9055611ce5611cc787611cc260028c015460801c90565b61192f565b60028a01906001600160801b0382549181199060801b169116179055565b611d1f611d0087611cc260028d01546001600160801b031690565b60028b01906001600160801b03166001600160801b0319825416179055565b611d5b611d3c838316611cc260028c01546001600160801b031690565b60028a01906001600160801b03166001600160801b0319825416179055565b16611cc2600289015460801c90565b60028701906001600160801b0382549181199060801b169116179055565b60028401548060801c15600014611f6d5750835460ff19166003178455611df0905b611dc4611db8865460a81c90565b6001600160581b031690565b336000908152600260205260409020611de0906113929061174a565b9055610584611db8865460a81c90565b83546001600160a81b03168455905b60028501548060801c15600014611e76575050918391611e5061182594611daa7f63a4a9eadd3ec05ca29afbd71d5c74886c6c6f21cc6ad89e586bce62eb6a9891999897600360ff19825416179055565b83546001600160a81b031684559b5b8680604051988998169c169a60081c1698866119a7565b6001600160801b03909c979695939194929c161580611f65575b15611ea757604051632f586c8160e21b8152600490fd5b7f63a4a9eadd3ec05ca29afbd71d5c74886c6c6f21cc6ad89e586bce62eb6a989196611f3f61182595611edb865460a81c90565b611f37611f17611f10611db8611efb6001600160581b03968787166118ec565b60018c01546001600160801b03165b9061190a565b80936114b4565b88546001600160a81b031660a89190911b6001600160a81b031916178855565b16809e611046565b336000908152600260205260409020909d90611f5e906113929061174a565b9055611e5f565b506001611e90565b6001600160801b039150161580612015575b15611f96576040516335e0932160e01b8152600490fd5b82546001600160581b039060a81c611fe7611fc7611f10611db8611fba87866118ec565b60018a015460801c611f0a565b86546001600160a81b031660a89190911b6001600160a81b031916178655565b336000908152600260205260409020911691906120039061174a565b61200e838254611046565b9055611dff565b506001611f7f565b6040516337f6f29d60e01b8152600490fd5b60405163e8d560ed60e01b8152600490fd5b6040516374dea6bf60e01b8152600490fd5b9350611b53611b30565b60405163127f08c960e11b8152600490fd5b604051630470806560e01b8152600490fd5b60405163f08c50a160e01b8152600490fd5b5060016120a1845460ff1690565b6120aa81610979565b1415611a86565b5081811615611a14565b60206120d2910151602080825183010191016111f9565b3360009081526002602090815260408083206001600160a01b0390951680845294909152902090919054821161217557336000908152600260205260409020612138918391612122908290610dab565b805490838203918211612168575b553390612379565b60405190815233907f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb60203392a3565b612170610ea9565b612130565b604051632ca2f52b60e11b8152600490fd5b9081606091031261000e57805161219d81610198565b916040602083015161121281610198565b60206121c591015160208082518301019101612187565b3360009081526002602090815260408083206001600160a01b039687168085529252909120929093169290915482116121755781838261221e61223294610dab3360018060a01b03166000526002602052604060002090565b805490848203918211612260575b55612379565b6040519081527f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb60203392a3565b612268610ea9565b61222c565b908152610100810192916103689160200190611948565b602061229b91015160208082518301019101612187565b6001600160a01b0392831660008181526003602052604090209284169390926122cb908390610a55908790610dab565b5090815490600160ff83166122df81610979565b0361208157339160081c160361236757805460ff191660021781557fb02fb5afcc8e0e09ac3c8801d4abf55d5ba871e9050b0b0949db45069c8997c1906118259061232e611db8825460a81c90565b33600090815260026020526040902061234a906113929061174a565b905580546001600160a81b0316815560405191829133958361226d565b6040516330cd747160e01b8152600490fd5b6001600160a01b0381166001036123955750906103689161249a565b6044926040519263a9059cbb60e01b84526004840152602483015260009283928380935af115612401573d6123c8575b50565b60208160803e600160805103156123c557807f90b8ec1877afffd816d05d9b13947f3ff18ec5851c38bad15ec2b710f92391b160209252fd5b3d81803e3d90fd5b9192916001600160a01b0381166001036124285750506103689161249a565b9091606493604051936323b872dd60e01b855260048501526024840152604483015260009283928380935af115612401573d6124615750565b60208160803e600160805103156123c557807f7939f424dcbfa2fa1d156b76cc697c9670f0bbaf8cf205037134e844b4916e7460209252fd5b60008080809481945af1156124ac5750565b807fb12d13ebe76e15b5fdb7bf52f0daba617b83ebcc560b0666c44fcdcd71f4362b60209252fdfea164736f6c6343000811000a";

type MatchConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MatchConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Match__factory extends ContractFactory {
  constructor(...args: MatchConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _owner: PromiseOrValue<string>,
    _bank: PromiseOrValue<string>,
    _minReward: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Match> {
    return super.deploy(
      _owner,
      _bank,
      _minReward,
      overrides || {}
    ) as Promise<Match>;
  }
  override getDeployTransaction(
    _owner: PromiseOrValue<string>,
    _bank: PromiseOrValue<string>,
    _minReward: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _owner,
      _bank,
      _minReward,
      overrides || {}
    );
  }
  override attach(address: string): Match {
    return super.attach(address) as Match;
  }
  override connect(signer: Signer): Match__factory {
    return super.connect(signer) as Match__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MatchInterface {
    return new utils.Interface(_abi) as MatchInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Match {
    return new Contract(address, _abi, signerOrProvider) as Match;
  }
}
