/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Match, MatchInterface } from "../../contracts/Match";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "_bank",
        type: "address",
      },
      {
        internalType: "uint88",
        name: "_minReward",
        type: "uint88",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "AddressZero",
    type: "error",
  },
  {
    inputs: [],
    name: "ETHTransferFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "Locked",
    type: "error",
  },
  {
    inputs: [],
    name: "NoAction",
    type: "error",
  },
  {
    inputs: [],
    name: "NoAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "NotOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "NotTheOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "OrderAIncorrectlyFulfilled",
    type: "error",
  },
  {
    inputs: [],
    name: "OrderBIncorrectlyFulfilled",
    type: "error",
  },
  {
    inputs: [],
    name: "OrderInactive",
    type: "error",
  },
  {
    inputs: [],
    name: "OverflowPrice",
    type: "error",
  },
  {
    inputs: [],
    name: "PriceTooHigh",
    type: "error",
  },
  {
    inputs: [],
    name: "RewardTooLow",
    type: "error",
  },
  {
    inputs: [],
    name: "SameUser",
    type: "error",
  },
  {
    inputs: [],
    name: "TraderANotEnoughToken",
    type: "error",
  },
  {
    inputs: [],
    name: "TraderBNotEnoughToken",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferFromFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "UnknownAction",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "tokenToSell",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "tokenToBuy",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "indexOrder",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "enum MatchLibrary.OrderStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "trader",
            type: "address",
          },
          {
            internalType: "uint88",
            name: "reward",
            type: "uint88",
          },
          {
            internalType: "uint128",
            name: "amountToSell",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToBuy",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToSellRest",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToBuyRest",
            type: "uint128",
          },
        ],
        indexed: false,
        internalType: "struct MatchLibrary.Order",
        name: "order",
        type: "tuple",
      },
    ],
    name: "AddOrder",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "tokenToSell",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "tokenToBuy",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "indexOrder",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "enum MatchLibrary.OrderStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "trader",
            type: "address",
          },
          {
            internalType: "uint88",
            name: "reward",
            type: "uint88",
          },
          {
            internalType: "uint128",
            name: "amountToSell",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToBuy",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToSellRest",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToBuyRest",
            type: "uint128",
          },
        ],
        indexed: false,
        internalType: "struct MatchLibrary.Order",
        name: "order",
        type: "tuple",
      },
    ],
    name: "CancelOrder",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "desiredAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "depositedAmount",
        type: "uint256",
      },
    ],
    name: "Deposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "userA",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "tokenToSell",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "tokenToBuy",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "userB",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "indexOrderA",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "indexOrderB",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "enum MatchLibrary.OrderStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "trader",
            type: "address",
          },
          {
            internalType: "uint88",
            name: "reward",
            type: "uint88",
          },
          {
            internalType: "uint128",
            name: "amountToSell",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToBuy",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToSellRest",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToBuyRest",
            type: "uint128",
          },
        ],
        indexed: false,
        internalType: "struct MatchLibrary.Order",
        name: "orderA",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "enum MatchLibrary.OrderStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "trader",
            type: "address",
          },
          {
            internalType: "uint88",
            name: "reward",
            type: "uint88",
          },
          {
            internalType: "uint128",
            name: "amountToSell",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToBuy",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToSellRest",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToBuyRest",
            type: "uint128",
          },
        ],
        indexed: false,
        internalType: "struct MatchLibrary.Order",
        name: "orderB",
        type: "tuple",
      },
    ],
    name: "MatchOrder",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdraw",
    type: "event",
  },
  {
    inputs: [],
    name: "PRICE_DECIMALS",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PRICE_PRECISION",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "bank",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newBank",
        type: "address",
      },
    ],
    name: "changeBank",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenToSell",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenToBuy",
        type: "address",
      },
    ],
    name: "countOrders",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "enum MatchLibrary.ActionType",
            name: "actionType",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct MatchLibrary.Action[]",
        name: "actions",
        type: "tuple[]",
      },
    ],
    name: "execute",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reward",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenToSell",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenToBuy",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "cursor",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "howMany",
        type: "uint256",
      },
    ],
    name: "fetchPageOrders",
    outputs: [
      {
        components: [
          {
            internalType: "enum MatchLibrary.OrderStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "trader",
            type: "address",
          },
          {
            internalType: "uint88",
            name: "reward",
            type: "uint88",
          },
          {
            internalType: "uint128",
            name: "amountToSell",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToBuy",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToSellRest",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToBuyRest",
            type: "uint128",
          },
        ],
        internalType: "struct MatchLibrary.Order[]",
        name: "values",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "newCursor",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenToSell",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenToBuy",
        type: "address",
      },
      {
        internalType: "uint88",
        name: "reward",
        type: "uint88",
      },
      {
        internalType: "uint128",
        name: "amountToSell",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "amountToBuy",
        type: "uint128",
      },
    ],
    name: "getActionAddOrder",
    outputs: [
      {
        components: [
          {
            internalType: "enum MatchLibrary.ActionType",
            name: "actionType",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct MatchLibrary.Action",
        name: "action",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenToSell",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenToBuy",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "indexOrder",
        type: "uint256",
      },
    ],
    name: "getActionCancel",
    outputs: [
      {
        components: [
          {
            internalType: "enum MatchLibrary.ActionType",
            name: "actionType",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct MatchLibrary.Action",
        name: "action",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "getActionDeposit",
    outputs: [
      {
        components: [
          {
            internalType: "enum MatchLibrary.ActionType",
            name: "actionType",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct MatchLibrary.Action",
        name: "action",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenToSell",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenToBuy",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "indexOrderA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "indexOrderB",
        type: "uint256",
      },
    ],
    name: "getActionMatch",
    outputs: [
      {
        components: [
          {
            internalType: "enum MatchLibrary.ActionType",
            name: "actionType",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct MatchLibrary.Action",
        name: "action",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "getActionWithdraw",
    outputs: [
      {
        components: [
          {
            internalType: "enum MatchLibrary.ActionType",
            name: "actionType",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct MatchLibrary.Action",
        name: "action",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "getActionWithdrawTo",
    outputs: [
      {
        components: [
          {
            internalType: "enum MatchLibrary.ActionType",
            name: "actionType",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct MatchLibrary.Action",
        name: "action",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenToSell",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenToBuy",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getOrder",
    outputs: [
      {
        components: [
          {
            internalType: "enum MatchLibrary.OrderStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "trader",
            type: "address",
          },
          {
            internalType: "uint88",
            name: "reward",
            type: "uint88",
          },
          {
            internalType: "uint128",
            name: "amountToSell",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToBuy",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToSellRest",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToBuyRest",
            type: "uint128",
          },
        ],
        internalType: "struct MatchLibrary.Order",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "minReward",
    outputs: [
      {
        internalType: "uint88",
        name: "",
        type: "uint88",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "orders",
    outputs: [
      {
        internalType: "enum MatchLibrary.OrderStatus",
        name: "status",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "trader",
        type: "address",
      },
      {
        internalType: "uint88",
        name: "reward",
        type: "uint88",
      },
      {
        internalType: "uint128",
        name: "amountToSell",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "amountToBuy",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "amountToSellRest",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "amountToBuyRest",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "usersBalances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608034620000ed57601f6200261738819003918201601f19168301916001600160401b03831184841017620000f257808492606094604052833981010312620000ed576200004d8162000108565b9060406200005e6020830162000108565b9101516001600160581b0381168103620000ed5760008054600180547fff00000000000000000000000000000000000000000000000000000000000000166001600160a01b039586161760a09490941b600160a01b600160f81b0316939093179092556001600160a81b03199091169290911691909117600160a01b1790556040516124f990816200011e8239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620000ed5756fe60806040526004361015610013575b600080fd5b60003560e01c8063361d004f146101a35780633ccfd60b1461019a57806346e40e0914610191578063496500441461018857806354b9a5861461017f5780635a6e1dca146101765780635d6e163f1461016d5780636673c2f11461016457806376cdb03b1461015b5780638da5cb5b1461015257806395082d2514610149578063acb41c2214610140578063ba16d60014610137578063c05e93b31461012e578063cefd071b14610125578063d4d925f31461011c578063dd02df1614610113578063e055561e1461010a578063f1a640f8146101015763f2fde38b146100f957600080fd5b61000e610e5c565b5061000e610e38565b5061000e610d34565b5061000e610c4c565b5061000e610b76565b5061000e610b39565b5061000e610af3565b5061000e610aa0565b5061000e610a35565b5061000e61098d565b5061000e610963565b5061000e610939565b5061000e61086f565b5061000e6107db565b5061000e610766565b5061000e6106e1565b5061000e61047f565b5061000e6103ef565b5061000e61025d565b5061000e6101bd565b6001600160a01b0381160361000e57565b503461000e57602036600319011261000e576004356101db816101ac565b6000546001600160a01b039190828116330361024b5760a01c60ff1615610239576000805460ff60a01b1916905516801561000e57600180546001600160a01b0319169190911790556000805460ff60a01b1916600160a01b179055005b6040516303cb96db60e21b8152600490fd5b6040516336b6b89560e01b8152600490fd5b503461000e576000806003193601126103205780546001600160a01b0390818116330361024b5760a01c60ff1615610239576000805460ff60a01b191690556102fd9080600154169081845260026020526102c5604085206001600052602052604060002090565b5491845260026020526102e5604085206001600052602052604060002090565b805490838203918211610313575b55600154166124b2565b6000805460ff60a01b1916600160a01b17905580f35b61031b610eda565b6102f3565b80fd5b608090600319011261000e5760043561033b816101ac565b90602435610348816101ac565b906044359060643590565b50634e487b7160e01b600052602160045260246000fd5b6007111561037457565b61037c610353565b565b91909160208093818352805160078110156103e2575b82840152015160408083015280519081606084015260005b8281106103ce57505060809293506000838284010152601f8019910116010190565b8181018601518482016080015285016103ac565b6103ea610353565b610394565b503461000e5761046e61040136610323565b919261040b611210565b506040519360018060a01b038092166020860152166040840152606083015260808201526080815260a081019080821067ffffffffffffffff831117610472575b8160405261045982610f4d565b6003825260c08101526040519182918261037e565b0390f35b61047a610f36565b61044c565b50602036600319011261000e576004803567ffffffffffffffff9182821161000e573660238301121561000e578181013592831161000e57602482016005926024369186861b01011161000e57600060ff815460a01c16156106d0576000805460ff60a01b191690558093819580156106bf57919392600192908584805b61054f575b50505050505050506105148134610ef1565b8061053f575b506000805460ff60a01b1916600160a01b179055604080519182526020820192909252f35b61054990336124b2565b3861051a565b97959697156106b1575b809561056e6105698a8686610f06565b610fdd565b86815161057a8161036a565b6105838161036a565b036105c7576105a59161059861059e92611265565b90611077565b985b611084565b953489116105b657859796976104fd565b604051632ca2f52b60e11b81528890fd5b600281516105d48161036a565b6105dd8161036a565b036105f2576105a59161059861059e92611696565b6003819b929a9b516106038161036a565b61060c8161036a565b03610627576105a591610598610621926119fa565b99611084565b88819b929b516106368161036a565b61063f8161036a565b0361065157906105a06105a5926120d3565b85815161065d8161036a565b6106668161036a565b0361067857906105a06105a5926121c6565b600681516106858161036a565b61068e8161036a565b036106a057906105a06105a59261229c565b60405163211bf9ef60e21b81528990fd5b828810610559578597610502565b6040516397587a3360e01b81528590fd5b6040516303cb96db60e21b81528390fd5b503461000e57604036600319011261000e5761046e610736610744600435610708816101ac565b610710611210565b50604080516001600160a01b039092166020830152602435908201529182906060820190565b03601f198101835282610fae565b6040519061075182610f4d565b6001825260208201526040519182918261037e565b503461000e57604036600319011261000e5761046e61073661078d600435610708816101ac565b6040519061079a82610f4d565b6004825260208201526040519182918261037e565b606090600319011261000e576004356107c7816101ac565b906024356107d4816101ac565b9060443590565b503461000e5761046e61073661082b6107f3366107af565b6107fe949194611210565b506040519485936020850160409194939294606082019560018060a01b0380921683521660208201520152565b6040519061083882610f4d565b6005825260208201526040519182918261037e565b6001600160581b0381160361000e57565b6001600160801b0381160361000e57565b503461000e5760a036600319011261000e5761046e600435610890816101ac565b6024359061089d826101ac565b604435906108aa8261084d565b6001600160581b03606435926108bf8461085e565b608435926108cc8461085e565b6108d4611210565b506040519560018060a01b0380921660208801521660408601521660608401526001600160801b0380921660808401521660a082015260a0815261091781610f92565b6040519061092482610f4d565b6002825260208201526040519182918261037e565b503461000e57600036600319011261000e576001546040516001600160a01b039091168152602090f35b503461000e57600036600319011261000e576000546040516001600160a01b039091168152602090f35b503461000e57600036600319011261000e57602060405160648152f35b6004111561037457565b9060048210156109c15752565b6109c9610353565b52565b60c0906109da8382516109b4565b60018060a01b0360208201511660208401526001600160581b036040820151166040840152816001600160801b03918260608201511660608601528260808201511660808601528260a08201511660a0860152015116910152565b503461000e5760e0610a91610a8b610a86610a4f366107af565b9291610a596110c7565b5060018060a01b0316600052600360205260406000209060018060a01b0316600052602052604060002090565b610bc7565b50611171565b610a9e60405180926109cc565bf35b503461000e57600036600319011261000e5760206001600160581b0360015460a01c16604051908152f35b604090600319011261000e57600435610ae3816101ac565b90602435610af0816101ac565b90565b503461000e576020610b30610b0736610acb565b6001600160a01b0391821660009081526003855260408082209290931681526020919091522090565b54604051908152f35b503461000e576020610b30610b4d36610acb565b6001600160a01b0391821660009081526002855260408082209290931681526020919091522090565b503461000e5761046e610736610b8e6107f3366107af565b60405190610b9b82610f4d565b6006825260208201526040519182918261037e565b50634e487b7160e01b600052603260045260246000fd5b8054821015610be4575b6000526003602060002091020190600090565b610bec610bb0565b610bd1565b95909796926001600160581b039060c0969593610c128960e081019c6109b4565b6001600160a01b031660208901521660408701526001600160801b039182166060870152928116608086015291821660a085015216910152565b503461000e57610c8f610c5e366107af565b91929060018060a01b03809416600052600360205260406000209060018060a01b0316600052602052604060002090565b90815481101561000e57610ca291610bc7565b509061046e82549160026001850154940154906040519485946001600160801b0392838560801c9516938360801c93169160ff8160a81c928260081c16911688610bf1565b92919060408401604085528151809152606085019060208093019060005b84828210610d165750505050930152565b60e085610d2986976001959697516109cc565b019401929101610d05565b503461000e57610d4336610323565b6001600160a01b038085166000908152600360209081526040808320938716835292905220929390928390548381039182918211610e2b575b11610e23575b50610d8c836110ff565b9360005b848110610db25785610da28686611077565b9061046e60405192839283610ce7565b610e1e90610e03610a8b610df385610ddc8860018060a01b03166000526003602052604060002090565b9060018060a01b0316600052602052604060002090565b610dfd8489611077565b90610bc7565b610e0d828961114f565b52610e18818861114f565b50611084565b610d90565b925038610d82565b610e33610eda565b610d7c565b503461000e57600036600319011261000e576020604051670de0b6b3a76400008152f35b503461000e57602036600319011261000e57600435610e7a816101ac565b6000805490916001600160a01b0391828116330361024b5760a01c60ff1615610239576000805460ff60a01b19169055168015610ed65781546001600160a01b0319161781556000805460ff60a01b1916600160a01b17905580f35b5080fd5b50634e487b7160e01b600052601160045260246000fd5b91908203918211610efe57565b61037c610eda565b9190811015610f29575b60051b81013590603e198136030182121561000e570190565b610f31610bb0565b610f10565b50634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff821117610f6957604052565b610f71610f36565b604052565b60e0810190811067ffffffffffffffff821117610f6957604052565b60c0810190811067ffffffffffffffff821117610f6957604052565b90601f8019910116810190811067ffffffffffffffff821117610f6957604052565b6040519061037c82610f76565b60408136031261000e5760405190610ff482610f4d565b8035600781101561000e57825260208082013567ffffffffffffffff9283821161000e57019136601f8401121561000e57823590811161106a575b60405192611046601f8301601f1916840185610fae565b8184523683838301011161000e578160009284809301838701378401015282015290565b611072610f36565b61102f565b91908201809211610efe57565b6001906000198114611094570190565b61109c610eda565b0190565b60209067ffffffffffffffff81116110ba575b60051b0190565b6110c2610f36565b6110b3565b604051906110d482610f76565b8160c06000918281528260208201528260408201528260608201528260808201528260a08201520152565b90611109826110a0565b6111166040519182610fae565b8281528092611127601f19916110a0565b019060005b82811061113857505050565b6020906111436110c7565b8282850101520161112c565b6020918151811015611164575b60051b010190565b61116c610bb0565b61115c565b9061037c60405161118181610f76565b60c081946111b7815460ff81166004811015611203575b8552600881901c6001600160a01b0316602086015260a81c6040850152565b60018101546001600160801b038082166060860152916111fb91600291906111e490608090811c90880152565b015491821660a08501906001600160801b03169052565b60801c910152565b61120b610353565b611198565b6040519061121d82610f4d565b6060602083600081520152565b919082604091031261000e5760208251611243816101ac565b92015190565b9081602091031261000e575190565b506040513d6000823e3d90fd5b9060009161128060208092015182808251830101910161122a565b936001600160a01b0390911691600090600184036113085750503360009081526002602052604090208491506112b7908390610ddc565b6112c2828254611077565b90557fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7611303825b6040805194855260208501919091523393918291820190565b0390a3565b6040516370a0823160e01b808252306004830152939693611372929081836024818a5afa928315611455575b8593611436575b506113488630338a612421565b60405190815230600482015281816024818a5afa918215611429575b85926113fc575b5050610ef1565b9050818111156113d257507fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7611303825b33600090815260026020526040902081906113cb906113c3908890610ddc565b918254611077565b90556112ea565b6113037fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7916113a3565b61141b9250803d10611422575b6114138183610fae565b810190611249565b388061136b565b503d611409565b611431611258565b611364565b61144e919350823d8411611422576114138183610fae565b913861133b565b61145d611258565b611334565b908160a091031261000e578051611478816101ac565b916020820151611487816101ac565b9160408101516114968161084d565b91608060608301516114a78161085e565b920151610af08161085e565b90600a6001600160581b0380931602918216918203610efe57565b50634e487b7160e01b600052601260045260246000fd5b6001600160581b039182169082160391908211610efe57565b906004811015611517575b60ff80198354169116179055565b61151f610353565b611509565b80546115479168010000000000000000821015611672575b600182018155610bc7565b91909161165c576115ec60c0600261037c9461156e8551600481101561164f575b826114fe565b60208501518154604087015160089290921b610100600160a81b031660ff9091161760a89190911b6001600160a81b03191617815561160c600182016115dd6115c160608901516001600160801b031690565b82546001600160801b0319166001600160801b03909116178255565b60808701516001600160801b03165b81546001600160801b031660809190911b6001600160801b031916179055565b019261164161162560a08301516001600160801b031690565b85546001600160801b0319166001600160801b03909116178555565b01516001600160801b031690565b611657610353565b611568565b634e487b7160e01b600052600060045260246000fd5b61167a610f36565b61153c565b9081526101008101929161037c91602001906109cc565b60206116ad91015160208082518301019101611462565b6001600160a01b039594938616938616929083158015611895575b611883576001600160801b0380821615908115611878575b50611866576001546001600160581b0380841692818360a01c168410611854577fff3bc2a56b72ea77cd35a9f8742e4233570604968fd25198111418b594f6a57a9461178d6118189361178461177461184f989e61175a611753611743886114b3565b6001600160581b03606491160490565b80976114e5565b981660018060a01b03166000526002602052604060002090565b6001600052602052604060002090565b92168254611077565b90556118086117b289610ddc8a60018060a01b03166000526003602052604060002090565b54966117da6117bf610fd0565b60018152953360208801526001600160581b03166040870152565b6001600160801b03811660608601526001600160801b03831660808601526001600160801b031660a0850152565b6001600160801b031660c0830152565b6118418161183c88610ddc8960018060a01b03166000526003602052604060002090565b611524565b60405191829133958361167f565b0390a4565b60405163256eeaad60e01b8152600490fd5b604051637bc90c0560e11b8152600490fd5b9050831615386116e0565b604051639fabe1c160e01b8152600490fd5b5084156116c8565b919082608091031261000e5781516118b4816101ac565b9160208101516118c3816101ac565b916060604083015192015190565b90670de0b6b3a764000091828102928184041490151715610efe57565b81156118f8570490565b6119006114ce565b0490565b9190916001600160801b0380809416911602918216918203610efe57565b906001600160801b0380911691821561193a57160490565b6119426114ce565b160490565b6001600160801b039182169082160391908211610efe57565b60c09080546119728460ff83166109b4565b6001600160a01b03600882901c16602085015260a81c604084015260018101546001600160801b038082166060860152608091821c8286015260029092015491821660a08501521c910152565b9095949261037c946119f3916101409461022085019960018060a01b03168552602085015260408401526060830190611960565b0190611960565b90611a14602060009301516020808251830101910161189d565b909490916001600160a01b03908482161580156120c9575b61188357611a5887610a86848416610ddc868a1660018060a01b03166000526003602052604060002090565b50611a8185610a86858916610ddc87871660018060a01b03166000526003602052604060002090565b5090805495600160ff8816611a95816109aa565b148015906120ab575b61209957825460081c6001600160a01b031695858716868960081c161461208757611ae360018401546001600160801b03611adb8260801c6118d1565b9116906118ee565b906001850154916001600160801b03831690611b0c611b01836118d1565b9460801c80956118ee565b1061207557600285015460801c92611b2e60028801546001600160801b031690565b6001600160801b0381166001600160801b0386161161206b575b50611b6b91611b5a611b5f9286611904565b611922565b6001600160801b031690565b6001600160801b038111612059576001600160a01b0389166000908152600260205260409020611b9e90888a1690610ddc565b546001600160801b03841611612047576001600160a01b0360088b901c89161660009081526002602052604090206001600160801b03821690611be4908a8e1690610ddc565b541061203557611d826001600160801b03611da092611cb68d8f8d8f610ddc928f83928d611c678b6117848786611c3682611c899916610ddc8960018060a01b03166000526002602052604060002090565b611c438588168254610ef1565b905516610ddc898d60081c1660018060a01b03166000526002602052604060002090565b90556001600160a01b0316600090815260026020526040902082841690610ddc565b611c968989168254611077565b9055169260081c1660018060a01b03166000526002602052604060002090565b611cc38383168254610ef1565b9055611cfd611cdf87611cda60028c015460801c90565b611947565b60028a01906001600160801b0382549181199060801b169116179055565b611d37611d1887611cda60028d01546001600160801b031690565b60028b01906001600160801b03166001600160801b0319825416179055565b611d73611d54838316611cda60028c01546001600160801b031690565b60028a01906001600160801b03166001600160801b0319825416179055565b16611cda600289015460801c90565b60028701906001600160801b0382549181199060801b169116179055565b60028401548060801c15600014611f855750835460ff19166003178455611e08905b611ddc611dd0865460a81c90565b6001600160581b031690565b336000908152600260205260409020611df8906113c390611774565b9055610598611dd0865460a81c90565b83546001600160a81b03168455905b60028501548060801c15600014611e8e575050918391611e6861184f94611dc27f63a4a9eadd3ec05ca29afbd71d5c74886c6c6f21cc6ad89e586bce62eb6a9891999897600360ff19825416179055565b83546001600160a81b031684559b5b8680604051988998169c169a60081c1698866119bf565b6001600160801b03909c979695939194929c161580611f7d575b15611ebf57604051632f586c8160e21b8152600490fd5b7f63a4a9eadd3ec05ca29afbd71d5c74886c6c6f21cc6ad89e586bce62eb6a989196611f5761184f95611ef3865460a81c90565b611f4f611f2f611f28611dd0611f136001600160581b0396878716611904565b60018c01546001600160801b03165b90611922565b80936114e5565b88546001600160a81b031660a89190911b6001600160a81b031916178855565b16809e611077565b336000908152600260205260409020909d90611f76906113c390611774565b9055611e77565b506001611ea8565b6001600160801b03915016158061202d575b15611fae576040516335e0932160e01b8152600490fd5b82546001600160581b039060a81c611fff611fdf611f28611dd0611fd28786611904565b60018a015460801c611f22565b86546001600160a81b031660a89190911b6001600160a81b031916178655565b3360009081526002602052604090209116919061201b90611774565b612026838254611077565b9055611e17565b506001611f97565b6040516337f6f29d60e01b8152600490fd5b60405163e8d560ed60e01b8152600490fd5b6040516374dea6bf60e01b8152600490fd5b9350611b6b611b48565b60405163127f08c960e11b8152600490fd5b604051630470806560e01b8152600490fd5b60405163f08c50a160e01b8152600490fd5b5060016120b9845460ff1690565b6120c2816109aa565b1415611a9e565b5081811615611a2c565b60206120ea9101516020808251830101910161122a565b3360009081526002602090815260408083206001600160a01b0390951680845294909152902090919054821161218d5733600090815260026020526040902061215091839161213a908290610ddc565b805490838203918211612180575b553390612391565b60405190815233907f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb60203392a3565b612188610eda565b612148565b604051632ca2f52b60e11b8152600490fd5b9081606091031261000e5780516121b5816101ac565b9160406020830151611243816101ac565b60206121dd9101516020808251830101910161219f565b3360009081526002602090815260408083206001600160a01b0396871680855292529091209290931692909154821161218d5781838261223661224a94610ddc3360018060a01b03166000526002602052604060002090565b805490848203918211612278575b55612391565b6040519081527f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb60203392a3565b612280610eda565b612244565b9081526101008101929161037c9160200190611960565b60206122b39101516020808251830101910161219f565b6001600160a01b0392831660008181526003602052604090209284169390926122e3908390610a86908790610ddc565b5090815490600160ff83166122f7816109aa565b0361209957339160081c160361237f57805460ff191660021781557fb02fb5afcc8e0e09ac3c8801d4abf55d5ba871e9050b0b0949db45069c8997c19061184f90612346611dd0825460a81c90565b336000908152600260205260409020612362906113c390611774565b905580546001600160a81b03168155604051918291339583612285565b6040516330cd747160e01b8152600490fd5b6001600160a01b0381166001036123ad57509061037c916124b2565b6044926040519263a9059cbb60e01b84526004840152602483015260009283928380935af115612419573d6123e0575b50565b60208160803e600160805103156123dd57807f90b8ec1877afffd816d05d9b13947f3ff18ec5851c38bad15ec2b710f92391b160209252fd5b3d81803e3d90fd5b9192916001600160a01b03811660010361244057505061037c916124b2565b9091606493604051936323b872dd60e01b855260048501526024840152604483015260009283928380935af115612419573d6124795750565b60208160803e600160805103156123dd57807f7939f424dcbfa2fa1d156b76cc697c9670f0bbaf8cf205037134e844b4916e7460209252fd5b60008080809481945af1156124c45750565b807fb12d13ebe76e15b5fdb7bf52f0daba617b83ebcc560b0666c44fcdcd71f4362b60209252fdfea164736f6c6343000811000a";

type MatchConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MatchConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Match__factory extends ContractFactory {
  constructor(...args: MatchConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _owner: PromiseOrValue<string>,
    _bank: PromiseOrValue<string>,
    _minReward: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Match> {
    return super.deploy(
      _owner,
      _bank,
      _minReward,
      overrides || {}
    ) as Promise<Match>;
  }
  override getDeployTransaction(
    _owner: PromiseOrValue<string>,
    _bank: PromiseOrValue<string>,
    _minReward: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _owner,
      _bank,
      _minReward,
      overrides || {}
    );
  }
  override attach(address: string): Match {
    return super.attach(address) as Match;
  }
  override connect(signer: Signer): Match__factory {
    return super.connect(signer) as Match__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MatchInterface {
    return new utils.Interface(_abi) as MatchInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Match {
    return new Contract(address, _abi, signerOrProvider) as Match;
  }
}
