/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TransferHelper,
  TransferHelperInterface,
} from "../../../contracts/libraries/TransferHelper";

const _abi = [
  {
    inputs: [],
    name: "ETHTransferFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferFromFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "NATIVE_TOKEN",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60808060405234601857604c908161001e823930815050f35b600080fdfe6080806040526004361015601257600080fd5b60003560e01c6331f7d96414602657600080fd5b6000366003190112603a5780600160209252f35b600080fdfea164736f6c6343000811000a";

type TransferHelperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TransferHelperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TransferHelper__factory extends ContractFactory {
  constructor(...args: TransferHelperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TransferHelper> {
    return super.deploy(overrides || {}) as Promise<TransferHelper>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TransferHelper {
    return super.attach(address) as TransferHelper;
  }
  override connect(signer: Signer): TransferHelper__factory {
    return super.connect(signer) as TransferHelper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TransferHelperInterface {
    return new utils.Interface(_abi) as TransferHelperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TransferHelper {
    return new Contract(address, _abi, signerOrProvider) as TransferHelper;
  }
}
