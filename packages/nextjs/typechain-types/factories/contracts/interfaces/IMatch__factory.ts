/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IMatch,
  IMatchInterface,
} from "../../../contracts/interfaces/IMatch";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenToSell",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenToBuy",
        type: "address",
      },
    ],
    name: "countOrders",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "enum MatchLibrary.ActionType",
            name: "actionType",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct MatchLibrary.Action[]",
        name: "actions",
        type: "tuple[]",
      },
    ],
    name: "execute",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reward",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenToSell",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenToBuy",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "cursor",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "howMany",
        type: "uint256",
      },
    ],
    name: "fetchPageOrders",
    outputs: [
      {
        components: [
          {
            internalType: "enum MatchLibrary.OrderStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "trader",
            type: "address",
          },
          {
            internalType: "uint88",
            name: "reward",
            type: "uint88",
          },
          {
            internalType: "uint128",
            name: "amountToSell",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToBuy",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToSellRest",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToBuyRest",
            type: "uint128",
          },
        ],
        internalType: "struct MatchLibrary.Order[]",
        name: "values",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "newCursor",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenToSell",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenToBuy",
        type: "address",
      },
      {
        internalType: "uint88",
        name: "reward",
        type: "uint88",
      },
      {
        internalType: "uint128",
        name: "amountToSell",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "amountToBuy",
        type: "uint128",
      },
    ],
    name: "getActionAddOrder",
    outputs: [
      {
        components: [
          {
            internalType: "enum MatchLibrary.ActionType",
            name: "actionType",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct MatchLibrary.Action",
        name: "action",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenToSell",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenToBuy",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "indexOrder",
        type: "uint256",
      },
    ],
    name: "getActionCancel",
    outputs: [
      {
        components: [
          {
            internalType: "enum MatchLibrary.ActionType",
            name: "actionType",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct MatchLibrary.Action",
        name: "action",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "getActionDeposit",
    outputs: [
      {
        components: [
          {
            internalType: "enum MatchLibrary.ActionType",
            name: "actionType",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct MatchLibrary.Action",
        name: "action",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenToSell",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenToBuy",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "indexOrderA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "indexOrderB",
        type: "uint256",
      },
    ],
    name: "getActionMatch",
    outputs: [
      {
        components: [
          {
            internalType: "enum MatchLibrary.ActionType",
            name: "actionType",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct MatchLibrary.Action",
        name: "action",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "getActionWithdraw",
    outputs: [
      {
        components: [
          {
            internalType: "enum MatchLibrary.ActionType",
            name: "actionType",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct MatchLibrary.Action",
        name: "action",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "getActionWithdrawTo",
    outputs: [
      {
        components: [
          {
            internalType: "enum MatchLibrary.ActionType",
            name: "actionType",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct MatchLibrary.Action",
        name: "action",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenToSell",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenToBuy",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getOrder",
    outputs: [
      {
        components: [
          {
            internalType: "enum MatchLibrary.OrderStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "trader",
            type: "address",
          },
          {
            internalType: "uint88",
            name: "reward",
            type: "uint88",
          },
          {
            internalType: "uint128",
            name: "amountToSell",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToBuy",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToSellRest",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amountToBuyRest",
            type: "uint128",
          },
        ],
        internalType: "struct MatchLibrary.Order",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "minReward",
    outputs: [
      {
        internalType: "uint88",
        name: "",
        type: "uint88",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "usersBalances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IMatch__factory {
  static readonly abi = _abi;
  static createInterface(): IMatchInterface {
    return new utils.Interface(_abi) as IMatchInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): IMatch {
    return new Contract(address, _abi, signerOrProvider) as IMatch;
  }
}
